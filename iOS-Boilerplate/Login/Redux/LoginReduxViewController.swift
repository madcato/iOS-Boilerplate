//
//  LoginViewController.swift
//  iOS-Boilerplate
//
//  Created by Daniel Vela Angulo on 11/01/2019.
//  Copyright (c) 2019 veladan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import ReSwift
import UIKit

enum LoginRedux {
    enum Result {
        case loginOk             // Login was ok
        case loginInvalid(String)  // Username or password invalid
    }
    enum Error {
        case invalidUserName(String)
        case invalidPassword(String)
        case connection(String)
    }
}

struct Session: StateType {
    var id: String?
    var result: LoginRedux.Result?
    var error: LoginRedux.Error?
}

struct DoLoginAction: Action {
    var userName: String?
    var password: String?
}

func loginReducer(action: Action, state: Session?) -> Session {
    var state = state ?? Session()
    switch action {
    case let login as DoLoginAction:
        if login.userName?.count ?? 0 < 3 {
            state.id = nil
            state.result = nil
            state.error = LoginRedux.Error.invalidUserName("Invalid username")
        } else if login.password?.count ?? 0 < 3 {
            state.id = nil
            state.result = nil
            state.error = LoginRedux.Error.invalidPassword("Invalid password")
        } else if login.userName == "dani" && login.password == "1234" {
            state.id = "AMN2342DGWG234VSDGADEG2323"
            state.result = LoginRedux.Result.loginOk
            state.error = nil
        } else {
            state.id = nil
            state.result = LoginRedux.Result.loginInvalid("Invalid user or password")
            state.error = nil
        }
    default:
        break
    }
    return state
}

var sessionStore = Store<Session>(
    reducer: loginReducer,
    state: nil
)

class LoginReduxViewController: UITableViewController, StoreSubscriber {
    typealias StoreSubscriberStateType = Session

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        deactivateWaitingState()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        sessionStore.subscribe(self)
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        sessionStore.unsubscribe(self)
    }

    // MARK: Do Login

    // @IBOutlet weak var nameTextField: UITextField!
    @IBOutlet private weak var userName: UITextField!
    @IBOutlet private weak var password: UITextField!
    @IBOutlet private weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet private weak var signInButton: UIButton!

    func newState(state session: Session) {
        deactivateWaitingState()
        switch session.error {
        case .connection:
            displayError(description: "Connection error")
        case .invalidUserName(let errorStr):
            displayInvalidUserName(description: errorStr)
        case .invalidPassword(let errorStr):
            displayInvalidPassword(description: errorStr)
        default:
            break
        }
        switch session.result {
        case .loginOk:
            self.dismiss(animated: true)
        case .loginInvalid(let errorStr):
            displayError(description: errorStr)
        default:
            break
        }
    }

    @IBAction private func doSignIn() {
        activateWaitingState()
        let action = DoLoginAction(userName: userName.text, password: password.text)
        sessionStore.dispatch(action)
    }

    func displayInvalidUserName(description: String) {
        displayError(description: description)
        userName.becomeFirstResponder()
    }

    func displayInvalidPassword(description: String) {
        displayError(description: description)
        password.becomeFirstResponder()
    }

    func displayError(description: String) {
        deactivateWaitingState()
        showAlert(description)
    }

    // MARK: view state management

    private func activateWaitingState() {
        signInButton.isHidden = true
        activityIndicator.isHidden = false
        activityIndicator.startAnimating()
    }

    private func deactivateWaitingState() {
        signInButton.isHidden = false
        activityIndicator.isHidden = true
        activityIndicator.stopAnimating()
    }
}

extension LoginReduxViewController: UITextFieldDelegate {
    // MARK: Text field delegate

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField === userName {
            password.becomeFirstResponder()
            return false
        }
        if textField === password {
            doSignIn()
        }
        return true
    }
}
