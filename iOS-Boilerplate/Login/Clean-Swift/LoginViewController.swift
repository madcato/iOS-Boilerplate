//
//  LoginViewController.swift
//  iOS-Boilerplate
//
//  Created by Daniel Vela Angulo on 11/01/2019.
//  Copyright (c) 2019 veladan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: AnyObject {
    func displayLogin(viewModel: Login.Process.ViewModel)
    func displayInvalidUserName(description: String)
    func displayInvalidPassword(description: String)
    func displayError(description: String)
}

class LoginViewController: UITableViewController, LoginDisplayLogic {
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
          }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        deactivateWaitingState()
    }

    // MARK: Do Login

    // @IBOutlet weak var nameTextField: UITextField!
    @IBOutlet private weak var userName: UITextField!
    @IBOutlet private weak var password: UITextField!
    @IBOutlet private weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet private weak var signInButton: UIButton!

    @IBAction private func doSignIn() {
        activateWaitingState()
        var request = Login.Process.Request()
        request.userName = userName.text
        request.password = password.text
        interactor?.doSignIn(request: request)
    }

    func displayLogin(viewModel: Login.Process.ViewModel) {
        deactivateWaitingState()
        if viewModel.signInOk {
            router?.dismiss()
        } else {
            showAlert("login was not OK")
        }
    }

    func displayInvalidUserName(description: String) {
        displayError(description: description)
        userName.becomeFirstResponder()
    }

    func displayInvalidPassword(description: String) {
        displayError(description: description)
        password.becomeFirstResponder()
    }

    func displayError(description: String) {
        deactivateWaitingState()
        showAlert(description)
    }

    // MARK: view state management

    private func activateWaitingState() {
        signInButton.isHidden = true

        activityIndicator.isHidden = false
        activityIndicator.startAnimating()
    }

    private func deactivateWaitingState() {
        signInButton.isHidden = false
        activityIndicator.isHidden = true
        activityIndicator.stopAnimating()
    }
}

extension LoginViewController: UITextFieldDelegate {
    // MARK: Text field delegate

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField === userName {
            password.becomeFirstResponder()
            return false
        }
        if textField === password {
            doSignIn()
        }
        return true
    }
}
