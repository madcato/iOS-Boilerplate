//
//  LoginPresenterTests.swift
//  iOS-Boilerplate
//
//  Created by Daniel Vela Angulo on 14/01/2019.
//  Copyright (c) 2019 veladan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iOS_Boilerplate
import XCTest

class LoginPresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: LoginPresenter?

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupLoginPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupLoginPresenter() {
        sut = LoginPresenter()
    }

    // MARK: Test doubles

    class LoginDisplayLogicSpy: LoginDisplayLogic {

        var displayLoginCalled = false

        func displayLogin(viewModel: Login.Process.ViewModel) {
            displayLoginCalled = true
        }

        var displayInvalidUserNameCalled = false

        func displayInvalidUserName(description: String) {
            displayInvalidUserNameCalled = true
        }

        var displayInvalidPasswordCalled = false

        func displayInvalidPassword(description: String) {
            displayInvalidPasswordCalled = true
        }

        var displayErrorCalled = false

        func displayError(description: String) {
            displayErrorCalled = true
        }
    }

    // MARK: Tests

    func testPresentLoginOK() {
        // Given
        let spy = LoginDisplayLogicSpy()
        sut?.viewController = spy
        let response = Login.Process.Response(result: Login.Process.Response.Result.loginOk)

        // When
        sut?.presentLogin(response: response)

        // Then
        XCTAssertTrue(spy.displayLoginCalled, "presentLogin(response:) login ok")
    }

    func testPresentLoginInvalid() {
        // Given
        let spy = LoginDisplayLogicSpy()
        sut?.viewController = spy
        let response = Login.Process.Response(result: Login.Process.Response.Result.loginInvalid)

        // When
        sut?.presentLogin(response: response)

        // Then
        XCTAssertTrue(spy.displayLoginCalled, "presentLogin(response:) login invalid")
    }

    func testInvalidUserName() {
        // Given
        let spy = LoginDisplayLogicSpy()
        sut?.viewController = spy

        // When
        sut?.presentError(code: Login.Process.Response.Error.invalidUserName, description: "error desc")

        // Then
        XCTAssertTrue(spy.displayInvalidUserNameCalled, "presentError(response:) bad username")
    }

    func testInvalidPassword() {
        // Given
        let spy = LoginDisplayLogicSpy()
        sut?.viewController = spy

        // When
        sut?.presentError(code: Login.Process.Response.Error.invalidPassword, description: "error desc")

        // Then
        XCTAssertTrue(spy.displayInvalidPasswordCalled, "presentError(response:) bad password")
    }
}
